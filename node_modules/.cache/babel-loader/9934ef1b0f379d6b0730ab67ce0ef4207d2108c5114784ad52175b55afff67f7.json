{"ast":null,"code":"var _jsxFileName = \"/Users/yaothao/Documents/Yellow Page Research/public-facing/YelloPagePublicFacing/src/SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useStateValue } from './StateProvider';\nimport Helpers from \"./Helpers\";\nimport './SearchBar.css';\nimport Tag from './Tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchBar() {\n  _s();\n  const [{\n    tagList\n  }, dispatch] = useStateValue();\n  const [{\n    total_tag\n  }] = useStateValue();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // const [inputValue, setInputValue] = useState('');\n\n  // const handleNewTag = (tags) => {\n  //   if (this.props.onNewTag) this.props.onNewTag(tags);\n  //   if (this.props.onTagChange) this.props.onTagChange(tags);\n  // }\n\n  // const handleInputChange = ({target: { value: inputValue }}) => {\n  //   inputValue = inputValue === ',' ? '' : inputValue;\n  //   setInputValue({inputValue});\n  // }\n\n  // const handleKeyDown = (e) => {\n  //   let { key, target: {value} } = e;\n  //   let { tags } = tagList;\n  //   switch (key) {\n  //     case 'Tab':\n  //       if (value) e.preventDefault();\n  //     case 'Enter':\n  //     case ',':\n  //       value = value.trim();\n  //       if (value && notDuplicate(tags, value)) {\n  //         addTag(value);\n  //       } else {\n  //         setInputValue({inputValue: ''})\n  //       }\n  //       break;\n  // case 'Backspace':\n  //   if (!value) {\n  //     handleTagDelete(tags.length - 1);\n  //   }\n  //   break;\n  //   }\n  // }\n  // const handleTagDelete = (index, filter, e) => {\n  // //   deleteTag(index, () => {\n  // //     this.props.onTagChange(this.state.tags);\n  // //   });\n  //     console.log(\"handleTagDelete\");\n  //     dispatch({\n  //         type: 'deleteTag',\n  //         item: {\n  //             filter: filter,\n  //             index: index,\n  //         }\n  //     })\n  // }\n  // const deleteTag = (index, callback) => {\n  //   let tags = this.state.tags.slice();\n\n  //   tags.splice(index, 1);\n  //   this.setState({ tags }, () => {\n  //     if (callback) callback();\n  //   });\n  // }\n\n  // const notDuplicate = (tags, newTag) => {\n  // //   return (!tags.includes(newTag) || this.props.allowDuplicates);\n  //     return true;\n  // }\n\n  // const addTag = (tag) => {\n  //   if (notDuplicate(tagList, tag)) {\n  //     setInputValue({inputValue: ''});\n\n  //   }\n  // }\n\n  // const updateControlledTags = (tags) => {\n  //   if (tags && !Helpers.hasDuplicates(tags)) {\n  //     this.setState({ tags }, () => {\n  //       // this.props.onTagChange(tags);\n  //     });\n  //   }\n  // }\n\n  // const componentWillReceiveProps = (nextProps) => {\n  //   updateControlledTags(nextProps.tags);\n  // }\n  // const renderBookTags = (book_name) => {\n  //     const book_tag_list = book_name?.map((tag, index) => {\n  //         return(\n  //             <Tag \n  //                 key={index}\n  //                 tag={tag}\n  //                 filter='book'\n  //             /> \n  //             )\n\n  //     })\n  //     return book_tag_list\n  // }\n  // const renderYearTags = (year_name) => {\n  //     const year_tag_list = year_name?.map((tag, index) => {\n  //         return(\n  //             <Tag \n  //                 key={index}\n  //                 tag={tag}\n  //                 filter='year'\n  //             /> \n  //             )\n\n  //     })\n  //     return year_tag_list\n  // }\n  // const renderCategoryTags = (category_name) => {\n  //     const category_tag_list = category_name?.map((tag, index) => {\n  //         return(\n  //             <Tag \n  //                 key={index}\n  //                 tag={tag}\n  //                 filter='category'\n  //             /> \n  //             )\n\n  //     })\n  //     return category_tag_list\n  // }\n\n  const handleSearch = () => {\n    try {\n      //   const response = await axios.get(`/api/search?query=${searchTerm}`);\n      //   setResults(response.data);\n      console.log({\n        searchTerm\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchbar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tagInputWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n\n// const TagsList = ({ tagList, onTagDelete }) => {\n//     let list = [];\n//     for (let i = 0; i < tagList.length; i++) {\n//         if (tagList[i].data.length > 0) {\n//             var current = tagList[i].data.map(( tag, index ) => (\n//                 <DeletableTag \n//                     name={tag} \n//                     key={index}\n//                     onDelete={onTagDelete} \n//                     filter={tagList[i].filter}\n//                 />\n//             ));\n//             list.push(current);\n//         }  \n//     }\n\n//     return (\n//             <ul className=\"tagsList\">\n//                 {list}\n//             </ul>\n\n//     )\n// }\n\n// const DeletableTag = ({name, index, onDelete, filter}) => {\n//     return (\n//         <li>\n//             {name} \n//             <a href=\"#\" onClick={e => onDelete(index, filter, e)}>x</a>\n//         </li>\n//     );\n// }\n_s(SearchBar, \"+0Jst9ZJ8mL92/RYk5YqB7BDhQA=\", false, function () {\n  return [useStateValue, useStateValue];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useStateValue","Helpers","Tag","SearchBar","tagList","dispatch","total_tag","searchTerm","setSearchTerm","handleSearch","console","log","error","e","target","value"],"sources":["/Users/yaothao/Documents/Yellow Page Research/public-facing/YelloPagePublicFacing/src/SearchBar.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useStateValue } from './StateProvider';\nimport Helpers from \"./Helpers\";\nimport './SearchBar.css';\nimport Tag from './Tag';\n\n\nfunction SearchBar () {\n    const [{tagList}, dispatch] = useStateValue();\n    const [{ total_tag }] = useStateValue()\n    const [searchTerm, setSearchTerm] = useState('');\n\n    // const [inputValue, setInputValue] = useState('');\n    \n    // const handleNewTag = (tags) => {\n    //   if (this.props.onNewTag) this.props.onNewTag(tags);\n    //   if (this.props.onTagChange) this.props.onTagChange(tags);\n    // }\n  \n    // const handleInputChange = ({target: { value: inputValue }}) => {\n    //   inputValue = inputValue === ',' ? '' : inputValue;\n    //   setInputValue({inputValue});\n    // }\n    \n    // const handleKeyDown = (e) => {\n    //   let { key, target: {value} } = e;\n    //   let { tags } = tagList;\n    //   switch (key) {\n    //     case 'Tab':\n    //       if (value) e.preventDefault();\n    //     case 'Enter':\n    //     case ',':\n    //       value = value.trim();\n    //       if (value && notDuplicate(tags, value)) {\n    //         addTag(value);\n    //       } else {\n    //         setInputValue({inputValue: ''})\n    //       }\n    //       break;\n        // case 'Backspace':\n        //   if (!value) {\n        //     handleTagDelete(tags.length - 1);\n        //   }\n        //   break;\n    //   }\n    // }\n    // const handleTagDelete = (index, filter, e) => {\n    // //   deleteTag(index, () => {\n    // //     this.props.onTagChange(this.state.tags);\n    // //   });\n    //     console.log(\"handleTagDelete\");\n    //     dispatch({\n    //         type: 'deleteTag',\n    //         item: {\n    //             filter: filter,\n    //             index: index,\n    //         }\n    //     })\n    // }\n    // const deleteTag = (index, callback) => {\n    //   let tags = this.state.tags.slice();\n      \n    //   tags.splice(index, 1);\n    //   this.setState({ tags }, () => {\n    //     if (callback) callback();\n    //   });\n    // }\n    \n    // const notDuplicate = (tags, newTag) => {\n    // //   return (!tags.includes(newTag) || this.props.allowDuplicates);\n    //     return true;\n    // }\n    \n    // const addTag = (tag) => {\n    //   if (notDuplicate(tagList, tag)) {\n    //     setInputValue({inputValue: ''});\n\n    //   }\n    // }\n    \n    // const updateControlledTags = (tags) => {\n    //   if (tags && !Helpers.hasDuplicates(tags)) {\n    //     this.setState({ tags }, () => {\n    //       // this.props.onTagChange(tags);\n    //     });\n    //   }\n    // }\n    \n    // const componentWillReceiveProps = (nextProps) => {\n    //   updateControlledTags(nextProps.tags);\n    // }\n    // const renderBookTags = (book_name) => {\n    //     const book_tag_list = book_name?.map((tag, index) => {\n    //         return(\n    //             <Tag \n    //                 key={index}\n    //                 tag={tag}\n    //                 filter='book'\n    //             /> \n    //             )\n            \n    //     })\n    //     return book_tag_list\n    // }\n    // const renderYearTags = (year_name) => {\n    //     const year_tag_list = year_name?.map((tag, index) => {\n    //         return(\n    //             <Tag \n    //                 key={index}\n    //                 tag={tag}\n    //                 filter='year'\n    //             /> \n    //             )\n            \n    //     })\n    //     return year_tag_list\n    // }\n    // const renderCategoryTags = (category_name) => {\n    //     const category_tag_list = category_name?.map((tag, index) => {\n    //         return(\n    //             <Tag \n    //                 key={index}\n    //                 tag={tag}\n    //                 filter='category'\n    //             /> \n    //             )\n            \n    //     })\n    //     return category_tag_list\n    // }\n\n    const handleSearch = () => {\n        try {\n        //   const response = await axios.get(`/api/search?query=${searchTerm}`);\n        //   setResults(response.data);\n           console.log({searchTerm}); \n        } catch (error) {\n          console.error(error);\n        }\n    };\n\n    return (\n        <div className=\"searchbar\">\n            \n            <div className=\"tagInputWrapper\"> \n                <input\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <button onClick={handleSearch}>Search</button>    \n                {/* <TagsList \n                    tagList={tagList} \n                    onTagDelete={handleTagDelete} \n                    // hashtag={hashtag}\n                /> */}\n            </div>\n            {/* <div>\n                <ul className=\"filterType\">\n                    <li style={{listStyle: 'none', padding: 3}}>\n                        <div className=\"type-title\">\n                            Book Name:\n                        </div>\n                        <div className=\"tags-list\">\n                            {renderBookTags(total_tag[0])}\n                        </div>\n                        \n                    </li>\n                    <li style={{listStyle: 'none', padding: 3}}>\n                        <div className=\"type-title\">\n                            Year Published:\n                        </div>\n                        <div className=\"tags-list\">\n                            {renderYearTags(total_tag[1])}\n                        </div>\n                    </li>\n                    <li style={{listStyle: 'none', padding: 3}}>\n                        <div className=\"type-title\">\n                            Category:\n                        </div>\n                        <div className=\"tags-list\">\n                            {renderCategoryTags(total_tag[2])}\n                        </div>\n                    </li>\n                </ul>\n            </div> */}\n    </div>\n    );\n}\n\n// const TagsList = ({ tagList, onTagDelete }) => {\n//     let list = [];\n//     for (let i = 0; i < tagList.length; i++) {\n//         if (tagList[i].data.length > 0) {\n//             var current = tagList[i].data.map(( tag, index ) => (\n//                 <DeletableTag \n//                     name={tag} \n//                     key={index}\n//                     onDelete={onTagDelete} \n//                     filter={tagList[i].filter}\n//                 />\n//             ));\n//             list.push(current);\n//         }  \n//     }\n    \n//     return (\n//             <ul className=\"tagsList\">\n//                 {list}\n//             </ul>\n      \n//     )\n// }\n  \n// const DeletableTag = ({name, index, onDelete, filter}) => {\n//     return (\n//         <li>\n//             {name} \n//             <a href=\"#\" onClick={e => onDelete(index, filter, e)}>x</a>\n//         </li>\n//     );\n// }\n\nexport default SearchBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,iBAAiB;AACxB,OAAOC,GAAG,MAAM,OAAO;AAAC;AAGxB,SAASC,SAAS,GAAI;EAAA;EAClB,MAAM,CAAC;IAACC;EAAO,CAAC,EAAEC,QAAQ,CAAC,GAAGL,aAAa,EAAE;EAC7C,MAAM,CAAC;IAAEM;EAAU,CAAC,CAAC,GAAGN,aAAa,EAAE;EACvC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEhD;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI;EACA;EACA;EACA;EACA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMU,YAAY,GAAG,MAAM;IACvB,IAAI;MACJ;MACA;MACGC,OAAO,CAACC,GAAG,CAAC;QAACJ;MAAU,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;IACtB;EACJ,CAAC;EAED,oBACI;IAAK,SAAS,EAAC,WAAW;IAAA,uBAEtB;MAAK,SAAS,EAAC,iBAAiB;MAAA,wBAC5B;QACI,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,WAAW;QACvB,KAAK,EAAEL,UAAW;QAClB,QAAQ,EAAGM,CAAC,IAAKL,aAAa,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QACjD,eACF;QAAQ,OAAO,EAAEN,YAAa;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EAM5C;IAAA;IAAA;IAAA;EAAA,QA8BR;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,GAvNSN,SAAS;EAAA,QACgBH,aAAa,EACnBA,aAAa;AAAA;AAAA,KAFhCG,SAAS;AAyNlB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}